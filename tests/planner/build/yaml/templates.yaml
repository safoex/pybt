import:
  - /tests/planner/build/python/planning.py

templates:
  action:
    args:
      required: [script]
      optional:
        preconditions: []
        immediate: None
        postconditions: None
        post_check_condition: None
    make: make_action(preconditions, script, immediate, postconditions)
    # note! either immediate or postconditions should be set :)

  precondition:
    args:
      required: [var]
      optional:
        false_state: FAILURE
        val: SUCCESS
    cache: true
    nodes:
      $name:
        type: sequence
        children: [~fallback, ~gc2]
      ~fallback:
        type: fallback
        children: [~skipper, ~fix_F]
      ~skipper:
        type: skipper
        children: [~gc1, ~fix_R]
      ~fix_R:
        type: sequence
        children: [~dumb1]
      ~fix_F:
        type: sequence
        children: [~dumb2]
      ~dumb1:
        type: condition
        expression: True
        true_state: SUCCESS
        false_state: SUCCESS
      ~dumb2:
        type: condition
        expression: True
        true_state: SUCCESS
        false_state: SUCCESS
      ~gc1:
        type: condition
        expression: "'$var == $val'"
        var: "'$var'"
        val: "'$val'"
        true_state: SUCCESS
        false_state: $false_state
      ~gc2:
        type: condition
        expression: "'$var == $val'"
        var: "'$var'"
        val: "'$val'"
        true_state: SUCCESS
        false_state: $false_state
    children: []

## actions


  goto:
    args:
      required: [location]

    nodes:
      $name:
        type: t/action
        postconditions:
          - location: $location
            prob: 0.9
          - location: ANY
            prob: 0.1
        script: move_to($location);
    cache: true
    children: []

  put:
    args:
      required: [object, place]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/grasped
            object: $object
          - type: t/close_to_place
            place: $place
        postconditions:
          - grasped: None
            has[$place][$object]: SUCCESS
            prob: 0.9
          - grasped: None
            has[ANY][$object]: SUCCESS
            close_to_object[$object]: RUNNING
            seen[$object]: FAILURE
            prob: 0.09
          - prob: 0.01
        script: put($object, $place);
    cache: true
    children: []

  grasp:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/close_to_object
            object: $object
          - type: t/grasped
            object: None
        postconditions:
          - grasped: $object
            prob: 0.8
          - prob: 0.2
        script: grasp($object);
    cache: true
    children: []

  detect:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/luminousity
          - type: t/seen
            object: $object
            val: RUNNING
        postconditions:
          - seen[$object]: SUCCESS;
            prob: 0.5
          - seen[$object]: FAILURE;
            prob: 0.5
        script: seen[$object] = detect($object);
    cache: true
    children: []

  light_on:
    args:
      required: [location]

    nodes:
      $name:
        type: t/action
        postconditions:
          - can_be_seen[$location]: SUCCESS
            prob: 1
        script: light_on($location)
    cache: true
    children: []

  measure_distance:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/seen
            what: $object
          - type: t/close_to_object
            object: $object
            val: RUNNING

        postconditions:
          - close_to_object[$object]: SUCCESS
            prob: 0.5
          - close_to_object[$object]: FAILURE
            prob: 0.5
        script: close_to_object[$object] = measure_reachability($object);
    cache: true
    children: []


## conditions

  grasped:
    args:
      required: [object]

    nodes:
      $name:
        type: t/precondition
        var: grasped
        val: $object
    cache: true

  at:
    args:
      required: [location]

    nodes:
      $name:
        type: t/precondition
        var: location
        val: $location
    cache: true

  close_to_object:
    args:
      required: [object]
      optional:
        val: SUCCESS

    nodes:
      $name:
        type: t/precondition
        var: close_to_object[$object]
        val: $val
    cache: true

  seen:
    args:
      required: [what]
      optional:
        false_state: FAILURE
        val: SUCCESS

    nodes:
      $name:
        type: t/precondition
        var: seen[$what]
        val: $val
        false_state: $false_state
    cache: true

  luminousity:
    args:
      optional:
        location: location
        false_state: FAILURE

    nodes:
      $name:
        type: t/precondition
        var: luminousity[$location]
        false_state: $false_state
        val: $val
    cache: true

  has:
    args:
      required: [object, place]
      optional:
        val: SUCCESS

    nodes:
      $name:
        type: t/precondition
        var: has[$place][$object]
        val: $val
    cache: true

  close_to_place:
    args:
      required: [place]

    nodes:
      $name:
        type: t/precondition
        var: closeness[location][$place]
    cache: true



