import:
  - /tests/planner/build/python/planning.py

templates:
  action:
    args:
      required: [script]
      optional:
        preconditions: []
        immediate: None
        postconditions: None
        post_check_condition: None
      view_exclude: [children, preconditions, immediate, postconditions, post_check_condition]
    make: make_action(preconditions, script, immediate, postconditions)
    # note! either immediate or postconditions should be set :)

  var_condition:
    args:
      required: [var]
      view_exclude: [children]

    nodes:
      $name:
        type: skipper
        children: [~SV, ~FV]

      ~SV:
        type: condition
        true_state: SUCCESS
        false_state: RUNNING
        expression: $var == SUCCESS
        var: $var
        val: SUCCESS

      ~FV:
        type: condition
        true_state: FAILURE
        false_state: RUNNING
        expression: $var == FAILURE
        var: $var
        val: SUCCESS
    children: [~SV, ~FV]


  precondition:
    args:
      required: [var]
      optional:
        false_state: FAILURE
        val: SUCCESS
        cond_type: condition
      view_exclude: [children, cond_type]
    cache: true
    nodes:
      $name:
        type: sequence
        children: [~fallback, ~gc2]
        view:
          expression: $var == $val
          on_F: $false_state
      ~fallback:
        type: fallback
        children: [~skipper, ~fix_F]
      ~skipper:
        type: skipper
        children: [~gc1, ~fix_R]
      ~fix_R:
        type: sequence
        children: [~dumb1]
      ~fix_F:
        type: sequence
        children: [~dumb2]
      ~dumb1:
        type: condition
        expression: True
        true_state: SUCCESS
        false_state: SUCCESS
      ~dumb2:
        type: condition
        expression: True
        true_state: SUCCESS
        false_state: SUCCESS
      ~gc1:
        type: $cond_type
        expression: $var == $val
        var: $var
        val: $val
        true_state: SUCCESS
        false_state: $false_state
      ~gc2:
        type: $cond_type
        expression: $var == $val
        var: $var
        val: $val
        true_state: SUCCESS
        false_state: $false_state
#    children: [~gc1, ~fix_R, ~fix_F]
    children: []

## actions

  find_in:
    args:
      required: [object, places]
      construct:
        _children_places:
          from: places
          V: ~$V_resolve
      view_exclude: [children]
    nodes:
      $name:
        type: sequence
        children: $_children_places
        view:
          object: $object


    unpack:
      places:
        nodes:
          ~$V_resolve:
            type: fallback
#            children: [~$V_if_seen, ~$V_go_and_detect]
            children: [ ~$V_go_and_detect]

          ~$V_go_and_detect:
            type: sequence
            children: [~$V_force_goto, ~$V_detect]

          ~$V_if_seen:
            type: condition
            expression: seen[$object] == "SUCCESS"
            true_state: SUCCESS
            false_state: FAILURE
#            type: t/seen
#            what: $object
#            cont_type: condition
#            val: RUNNING

          ~$V_force_goto:
            type: t/goto
            place: $V

          ~$V_detect:
            type: t/detect
            object: $object
            seen_prec: FAILURE

    children: []
  find:
    args:
      required: [object]

    nodes:
      $name:
        type: t/find_in
        object: $object
        places: [table1, table2]
        preconditions:
          - type: t/seen
            what: $object
            val: FAILURE
            cond_type: condition
        postconditions:
          - seen[$object]: SUCCESS
            prob: 0.9
          - seen[$object]: FAILURE
            prob: 0.1



  detect_on:
    args:
      required: [object, place]

    nodes:
      $name:
        type: fallback
        children: [~if_wiped, ~not_wiped]
        view:
          detect: $object on $place
        preconditions:
          - type: t/has_no
            place: $place
            object: $object
            val: RUNNING
            cond_type: condition
        postconditions:
          - has_no[$place][$object]: SUCCESS
            prob: 0.5
          - has_no[$place][$object]: FAILURE
            prob: 0.5
      ~if_wiped:
        type: sequence
        children: [~if, ~wiped]
      ~if:
        type: condition
        expression: wiped[$place][$object] == SUCCESS
        true_state: SUCCESS
        false_state: FAILURE
      ~wiped:
        type: t/detect_on_prob
        object: $object
        place: $place
        s_prob: 0.8
      ~not_wiped:
        type: t/detect_on_prob
        object: $object
        place: $place
        s_prob: 0.5
    children: []


  detect_on_prob:
    args:
      required: [object, place]
      optional:
        s_prob: 0.5

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/close_to_place
            place: $place
          - type: t/has_no
            place: $place
            object: $object
            val: RUNNING
            cond_type: condition
        postconditions:
          - has_no[$place][$object]: SUCCESS
            prob: $s_prob
          - has_no[$place][$object]: FAILURE
            prob: 1 - $s_prob
        script: detect_on($object, $place);



  goto:
    args:
      required: [place]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/mypose
            pose: normal
        postconditions:
          - location: $place
            prob: 0.95
          - location: ANY
            prob: 0.05
        script: goto($place);
    cache: true
    children: []

  move_closer:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/close_to_object
            object: $object
            val: FAILURE
            cond_type: condition
          - type: t/seen
            what: $object
        postconditions:
          - close_to_object[$object]: SUCCESS
            prob: 0.95
          - prob: 0.05
        script: move_closer($object);
    cache: true
    children: []

  put:
    args:
      required: [object, place]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/grasped
            object: $object
          - type: t/close_to_place
            place: $place
        postconditions:
          - grasped: None
            has[$place][$object]: SUCCESS
            prob: 0.9
          - grasped: None
            has[ANY][$object]: RUNNING
            close_to_object[$object]: RUNNING
            seen[$object]: FAILURE
            prob: 0.09
          - prob: 0.01
        script: put($object, $place);
    cache: true
    children: []

  grasp:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/close_to_object
            object: $object
          - type: t/grasped
            object: None
        postconditions:
          - grasped: $object
            prob: 0.8
          - prob: 0.2
        script: grasp($object);
    cache: true
    children: []

  detect:
    args:
      required: [object]
      optional:
        seen_prec: RUNNING

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/luminousity
          - type: t/seen
            what: $object
            val: $seen_prec
            cond_type: condition
        postconditions:
          - seen[$object]: SUCCESS
            prob: 0.5
          - seen[$object]: FAILURE
            prob: 0.5
        script: detect($object);
    cache: true
    children: []

  light_on:
    args:
      required: [place]

    nodes:
      $name:
        type: t/action
        postconditions:
          - luminousity: SUCCESS
            prob: 1
        script: light_on($place)
    cache: true
    children: []

  measure_distance:
    args:
      required: [object]

    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/seen
            what: $object
          - type: t/close_to_object
            object: $object
            val: RUNNING
            cond_type: condition

        postconditions:
          - close_to_object[$object]: SUCCESS
            prob: 0.5
          - close_to_object[$object]: FAILURE
            prob: 0.5
        script: measure($object);
    cache: true
    children: []

  change_pose:
    args:
      required: [pose]
    nodes:
      $name:
        type: t/action
        postconditions:
          - r_pose[$pose]: SUCCESS
            r_pose[other_pose[$pose]]: FAILURE
            prob: 1
        script: to_pose($pose);
    cache: True
    children: []

  _wipe:
    args:
      required: [place]
      optional:
        objects: [soda, sprayer, virus]
    nodes:
      $name:
        type: t/action
        preconditions:
          - type: t/mypose
            pose: wipe
        script: wipe($place);
    make: make_wipe_action(place, objects);
    children: []

  wipe:
    args:
      required: [place, object]
    nodes:
      $name:
        type: t/_wipe
        place: $place
        preconditions:
            - type: t/has_no
              object: $object
              place: $place
              val: FAILURE
              cond_type: condition
        postconditions:
          - has_no[$place][$object]: SUCCESS
            prob: 0.8
          - prob: 0.2
    children: []

  wipe_and_check:
    args:
      required: [place, object]
    nodes:
      $name:
        type: sequence
        children: [~wipe, ~check]
        preconditions:
          - type: t/has_no
            object: $object
            place: $place
            val: FAILURE
            cond_type: condition

        postconditions:
          - has_no[$place][$object]: SUCCESS
            prob: 0.8
          - prob: 0.2
      ~wipe:
        type: t/_wipe
        place: $place
      ~check:
        type: t/detect_on
        object: $object
        place: $place






## conditions

  wiped:
    args:
      required: [place, object]
      optional:
        false_state: FAILURE
        val: SUCCESS
        cond_type: t/var_condition
    nodes:
      $name:
        type: t/precondition
        var: wiped[$place][$object]
        val: $val
        cond_type: $cond_type

    children: []
    cache: True

  nowhere_in:
    args:
      required: [object, places]
      construct:
        _children_places:
          from: places
          V: ~$V_has_no
      view_exclude: [children]
    nodes:
      $name:
        type: sequence
        children: $_children_places
        view:
          object: $object
    unpack:
      places:
        nodes:
          ~$V_has_no:
            type: t/has_no
            place: $V
            object: $object

    children: $_children_places

  nowhere:
    args:
      required: [object]
    nodes:
      $name:
        type: t/nowhere_in
        places: [table1, table2]
        object: $object


  mypose:
    args:
      required: [pose]
      view_exclude: [children]
      optional:
        val: SUCCESS
        cond_type: t/var_condition
    nodes:
      $name:
        type: t/precondition
        var: r_pose[$pose]
        val: $val
    cache: True

  grasped:
    args:
      required: [object]
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: grasped
        val: $object
    cache: true

  at:
    args:
      required: [place]
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: location
        val: $place
    cache: true

  close_to_object:
    args:
      required: [object]
      optional:
        val: SUCCESS
        cond_type: t/var_condition
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: close_to_object[$object]
        val: $val
        cond_type: $cond_type
    cache: true

  seen:
    args:
      required: [what]
      optional:
        false_state: FAILURE
        val: SUCCESS
        cond_type: t/var_condition
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: seen[$what]
        val: $val
        false_state: $false_state
        cond_type: $cond_type
    cache: true

  luminousity:
    args:
      optional:
        place: location
        false_state: FAILURE
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: luminousity
        false_state: $false_state
    cache: true

  has_no:
    args:
      required: [object, place]
      optional:
        val: SUCCESS
        cond_type: t/var_condition
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: has_no[$place][$object]
        val: $val
        cond_type: $cond_type
    cache: true

  close_to_place:
    args:
      required: [place]
      view_exclude: [children]
    nodes:
      $name:
        type: t/precondition
        var: location
        val: $place
    cache: true



